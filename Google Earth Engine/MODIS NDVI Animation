//Geometry gradient bar = place it in your area, it will serve as a legend bar
// geometry label = place it in your area, it will serve as a legend label

// Fetch a MODIS NDVI collection and select NDVI.
var col = ee.ImageCollection('MODIS/006/MOD13A2').select('NDVI');

// Define a mask to clip the NDVI data by.
var mask = ee.FeatureCollection(peru) //Change this to your Polygon/area

//Change to your study area
// Define the regional bounds of animation frames.
var region = ee.Geometry.Polygon(
  [[[20.698368046353494, 60.1446395611524],
    [20.698368046353494, 80.16300755581617],
    [40.229366328646506, 80.16300755581617],
    [40.229366328646506, 60.1446395611524]]],
  null, false
);

// Add day-of-year (DOY) property to each image.
col = col.map(function(img) {
  var doy = ee.Date(img.get('system:time_start')).getRelative('day', 'year');
  return img.set('doy', doy);
});

// Get a collection of distinct images by 'doy'.
var distinctDOY = col.filterDate('2014-01-01', '2017-12-01');

// Define a filter that identifies which images from the complete
// collection match the DOY from the distinct DOY collection.
var filter = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});

// Define a join.
var join = ee.Join.saveAll('doy_matches');

// Apply the join and convert the resulting FeatureCollection to an
// ImageCollection.
var joinCol = ee.ImageCollection(join.apply(distinctDOY, col, filter));

// Apply median reduction among matching DOY collections.
var comp = joinCol.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
  );
  return doyCol.reduce(ee.Reducer.median());
});

// Define RGB visualization parameters.
var visParams = {
  min: 0.0,
  max: 9000.0,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ],
};

// Add a color gradient bar with a label.
geometryGradientBar = geometryGradientBar; // <-- this is a drawn geometry;
var style = require('users/gena/packages:style');
var utils = require('users/gena/packages:utils');
var text = require('users/gena/packages:text');

var min = 0;
var max = 1;
var textProperties = {
  fontSize: 16,
  textColor: 'ffffff',
  outlineColor: '000000',
  outlineWidth: 0,
  outlineOpacity: 0.6
};
var labels = ee.List.sequence(min, max);
var gradientBar = style.GradientBar.draw(geometryGradientBar, {
  min: min, max: max, palette: visParams.palette, labels: labels,
  format: '%.0f', text: textProperties
});

var label = 'NDVI';
var scale = Map.getScale() * 1; // scale text font relative to the current map scale
geometryLabel = geometryLabel;  // <-- this comes from drawn point geometry
var text = text.draw(label, geometryLabel, scale, {fontSize: 16});

// Create RGB visualization images for use as animation frames.
// Blend the gradient bar and label images to the NDVI images.
var rgbVis =col.map(function(img) {
  var y = ee.Number(img.get("year")).toInt()
  var m = ee.Number(img.get("month")).toInt()
  var label = ee.String(y).cat("-").cat(m)
  var text = text.draw(label, geometryLabel, scale, {fontSize: 32});
  return img.visualize(visParams).clip(mask).blend(gradientBar).blend(text);
});

// Define GIF visualization arguments.
var gifParams = {
  'region': geometry2,
  'dimensions': 600,
  'crs': 'EPSG:4236',
  'framesPerSecond': 2,
  'format': 'gif'
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));
