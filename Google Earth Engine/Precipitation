//Change the geometry label and Gradient bar according to the study area

// Define a mask to clip the NDVI data by.
var mask = ee.FeatureCollection(basin)
      .filter(ee.Filter.inList("WMO306_M_1",["Kunene"])).geometry();

Map.centerObject(mask, 6)
Map.addLayer(mask, {}, 'Kunene Basin')




// set start and end year
var startyear = 2000; 
var endyear = 2020; 

// make a date object
var startdate = ee.Date.fromYMD(startyear,1, 1);
var enddate = ee.Date.fromYMD(endyear + 1, 1, 1);

// make a list with years
var years = ee.List.sequence(startyear, endyear);


var annualPrecip = ee.ImageCollection.fromImages(
  years.map(function (year) {
    var annual = chirps
        .filter(ee.Filter.calendarRange(year, year, 'year'))
        .sum();
    return annual
        .set('year', year)
        .set('system:time_start', ee.Date.fromYMD(year, 1, 1));
}));



var title = {
  title: 'Annual precipitation Kunene Basin',
  hAxis: {title: 'Time'},
  vAxis: {title: 'Precipitation (mm)'},
};

var chart = ui.Chart.image.seriesByRegion({
  imageCollection: annualPrecip, 
  regions: mask,
  reducer: ee.Reducer.mean(),
  band: 'precipitation',
  scale: 2500,
  xProperty: 'system:time_start',
  seriesProperty: 'SITE'
}).setOptions(title)
  .setChartType('ColumnChart');
  
  print(chart);


var annualMean = annualPrecip.median().clip(mask);

var pViz = {
  min: 50, 
  max: 1200, 
  palette: '0000FF, FDFF92, FF2700, FF00E7'
};


Map.centerObject(mask);
Map.addLayer(annualMean, pViz, 'mean yearly Rainfall');

//Adding Legend
//https://www.youtube.com/watch?v=Eemotuv2Kzk


//TO TEST FOR TIME SERIES ANIMATION 
//https://www.youtube.com/watch?v=LRVZbjjKcO0



/*



// make a list with years
var years = ee.List.sequence(2000,2021,1);
var months = ee.List.sequence(1,12,1);


var annualPrecip2 = ee.ImageCollection.fromImages(
  years.map(function (m) {
    var annual = chirps
        .filter(ee.Filter.calendarRange(m, m, 'month'))
        .sum()
        ;
    return annual
        .set('month', m)
        .set('system:time_start', ee.Date.fromYMD(m, 12, 1));
}));




  

var col =  ee.ImageCollection.fromImages(
  years.map(function (y) {
    return months.map(function(m){
      var start = ee.Date.fromYMD(y,m,1).advance(-1,"month");
      var end = ee.Date.fromYMD(y,m,1).advance(1,"month");
      var w = annualPrecip2.filterDate(start,end).max();    
                    
      return w.set('year', y)
              .set('month', m)
              .set('system:time_start',start);
  })}).flatten()
);


// Define RGB visualization parameters.
var visParams = {
  min: 0.0, 
  max: 40.0, 
  palette: '0000FF, FDFF92, FF2700, FF00E7'
};





// Add a color gradient bar with a label.
geometryGradientBar = geometryGradientBar; // <-- this is a drawn geometry;
var style = require('users/gena/packages:style');
var utils = require('users/gena/packages:utils');
var txt = require('users/gena/packages:text');

var min = 0;
var max = 40;
var textProperties = {
  fontSize: 12,
  textColor: 'ffffff',
  outlineColor: '000000',
  outlineWidth: 0,
  outlineOpacity: 0.6
};
var labels = ee.List.sequence(min, max);
var gradientBar = style.GradientBar.draw(geometryGradientBar, {
  min: min, max: max, palette: visParams.palette, labels: labels,
  format: '%.0f', text: textProperties
});

var label = 'LST';
var scale = Map.getScale() * 1; // scale text font relative to the current map scale
geometryLabel = geometryLabel;  // <-- this comes from drawn point geometry
//var text = text.draw(label, geometryLabel, scale, {fontSize: 32});

// Create RGB visualization images for use as animation frames.
// Blend the gradient bar and label images to the NDVI images.
var rgbVis =col.map(function(img) {
  var y = ee.Number(img.get("year")).toInt()
  var m = ee.Number(img.get("month")).toInt()
  var label = ee.String(y).cat("-").cat(m)
  var text = txt.draw(label, geometryLabel, scale, {fontSize: 12});
  return img.visualize(visParams).clip(chicama).blend(gradientBar).blend(text);
});

print(rgbVis)

// Define GIF visualization arguments.
var gifParams = {
  'region': chicama,
  'dimensions': 200,
  //Change EPSG according to UTM of your country
  'crs': 'EPSG:32717',
  'framesPerSecond': 3,
  'format': 'gif'
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));


//Map Chart
// Chart the time-series
var temp_trend = ui.Chart.image.series({
  imageCollection: col,
  region: chicama,
  reducer: ee.Reducer.median(),
  scale: 1000,
  xProperty: 'system:time_start'})
  .setOptions({
    lineWidth: 1,
    pointSize: 3,
    trendlines: {0: {
        color: 'CC0000'
      }},
     title: 'LST  Time Series',
     vAxis: {title: 'LST Celsius'}});
print(temp_trend);

*/
